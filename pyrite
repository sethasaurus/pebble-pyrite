#!/bin/bash
clear
echo "#-------------------------------------------------------"
echo "# pyrite v1.0"
echo "# by sethasaurus"
echo "# 29/08/2022"
echo "#-------------------------------------------------------"
echo "#"
echo "# This prompts the user to inspect config files,"
echo "# from a Pebble pbw package and attempts to"
echo "# generate a simple html config page."
echo "# The config page is then embedded in a data URL"
echo "# called from the pebble-js-app.js file in the"
echo "# pebble package."
echo "# The pbw file generated can then be sideloaded"
echo "# NOTE: config keys are case-sensitive, so if something"
echo "# doesn't work, try again!"
echo "# (YMMV)"
echo "#-------------------------------------------------------"
echo 
#If no args print usage
 if [ $# -lt 1 ]; then {
    echo "
 Usage:
    $0 <pbwfile>

 "
    exit 0
 } fi

#cd ~/Downloads/pebble/pyrite/

pbwfile=$1
dirname="${pbwfile[@]/%.pbw/}"
# Create working dir
if [[ ! -d $dirname ]]
then
    mkdir $dirname
fi

cd $dirname

if [[ ! -f "pebble-js-app.js" ]]
then
    # Unzip pbw
    unzip -qq ../$pbwfile 2>> /dev/null
fi
# Look for name of package
#grep -i shortname appinfo.json
# Backup pebble-js-app.js
cp pebble-js-app.js pebble-js-app.js.bak

# Inspect files for more info
echo "OK we need to do some file inspection."
echo "Look for configuration keys in various files."
echo "First 2 methods will be the easiest."
echo "'strings' produces a lot of output - q to quit."
echo
PS3="Select an option: "
select opt1 in 'KEYs' 'configData' 'strings' 'done'; do
  case $opt1 in
      'KEYs')
        echo "Searching pebble-js-app.js file for KEYs.. ";
        grep -i KEY pebble-js-app.js;;
      'configData')
        echo "Searching pebble-js-app.js file for configData.. ";
        grep -i configdata pebble-js-app.js;;
      'strings')
        echo "Showing strings in pebble-app.bin (hit q to quit).. ";
        strings pebble-app.bin | less ;;
      'done')
      break;;
    *) 
      echo "Invalid option $REPLY";;
  esac
done
echo
echo "OK now I need your help!"
echo

felements=""
saveopts=""

echo "Config page settings:"
read -p "Enter a name: " name
read -p "Background colour: (default grey = #303030) " bgcol
read -p "Text colour: (default white = #FFFFFF) " tcol
if [$bgcol == ""]
then
    bgcol="#303030"
fi
if [$tcol == ""]
then
    tcol="#FFFFFF"
fi
echo
PS3="Select the operation: "
select opt in 'Add Dropdown' 'Add Checkbox' 'Add Text Field' 'Add Colour Picker' 'Start Again' 'finish'; do
  case $opt in
    'Add Dropdown')
      read -p "selectname: " selectname;
      read -p "values: val1 val2 val3 .. " selectvals;
      felements+="+'<p>${selectname^^} - <select id=\"$selectname""_select\">'";
      setvals=($selectvals);
      for i in "${setvals[@]}"
        do
           : 
           felements+="+'<option value=\"$i\">${i^}</option>'"
        done;
      felements+="+'</select></p>'";
      saveopts+="+'var $selectname""Select = document.getElementById(\"$selectname""_select\");'";
      saveopts+="+'options[\"$selectname\"] = $selectname""Select.options[$selectname""Select.selectedIndex].value;'";;
    'Add Checkbox')
      read -p "Checkbox name: " checkname
      read -p "Checkbox value: " checkval;
      felements+="+'<p>${checkname^^} - <input type=\"checkbox\" value=\"$checkval\" id=\"$checkname""_check\"></p>'";
      saveopts+="+'var $checkname""check = document.getElementById(\"$checkname""_check\");'"
      saveopts+="+'options[\"$checkname\"] = $checkname""_check.checked;'";;
    'Add Text Field')
      read -p "Text Field name: " tfieldname
      read -p "default value: " tfielddefault;
      felements+="+'<p>${tfieldname^^} - <input type=\"text\" value=\"$tfielddefault\" id=\"$tfieldname""_txt\"></p>'";
      saveopts+="+'var $tfieldname""_txt = document.getElementById(\"$tfieldname""_txt\");'"
      saveopts+="+'options[\"$tfieldname\"] = $tfieldname""_txt.value;'";;
    'Add Colour Picker')
      read -p "Colour Picker name: " cpname
      felements+="+'<p>${cpname^^} COLOUR: '";
      felements+="+'<input type=\"color\" id=\"$cpname""_col\"></p'";
      saveopts+="+'var $cpname""_col = document.getElementById(\"$cpname""_col\");'";
      saveopts+="+'options[\"$cpname\"] = $cpname""_col.value;'";;
    'Start Again')
      felements=""
      saveopts="";;
    'finish')
      break;;
    *) 
      echo "Invalid option $REPLY";;
  esac
done
echo
echo "Watchapp name: $name"
echo
# Find call to OpenURL
oldfunc=`grep -iPo 'openURL\(.+\)' pebble-js-app.js`
# Replace arguments of openURL with our config page
echo "Old Function: "
echo $oldfunc
echo

newfunc1="Pebble.openURL(\"data:text/html,\"+encodeURIComponent(''+
        '<!DOCTYPE html><html>'+
        '<head><title>$name Configuration</title>'+
        '</head>'+
        '<body style=\"background-color:$bgcol;\">'+
        '<font color=\"$tcol\">'+
          '<p>$name Settings:</p>'+
          '<form id=\"setform\">'"
# felements goes here
newfunc2="+'<br><p><button id=\"save_button\">Save</button></p>'+
          '</form>'+
          '<script>'+
            'function saveOptions() {'+
            'var options = {};'"
# saveopts goes here
newfunc3="+'return options;'+
            '};'+
            'var submitButton = document.getElementById(\"save_button\");'+
            'submitButton.addEventListener(\"click\", '+
              'function() {'+
                'console.log(\"Submit\");'+
                'var options = saveOptions();'+
                'var location = \"pebblejs://close#\"+encodeURIComponent(JSON.stringify(options));'+
                'document.location = location;'+
              '}, '+
            'false);'+
          '</script>'+
          '</font>'+
          'This config back from the dead! <br/>'+
          'pyrite by sethasaurus 2022'+
        '</body></html><!--.html'));"

# Build the new function
newfunc=$newfunc1$felements$newfunc2$saveopts$newfunc3
# Do some cleanup
cleanfunc=`echo $newfunc | sed "s/'+'//g" | sed "s/'+ '//g"`
escnew=`echo $cleanfunc | sed 's#/#\\/#g' | sed 's/\"/\\\"/g'`
echo "New code:"
#echo $cleanfunc > ../clean.html
#js-beautify -r --type=html ../clean.html
echo
echo "Replacing old openURL function with new config.. "
echo
# Use -i to replace text and update file
sed -i "s^Pebble.openURL(.*);^${escnew}^" pebble-js-app.js
sed "s^Pebble.openURL(.*);^${escnew}^" pebble-js-app.js

name=`echo $name | sed 's/ /_/g'`
# Zip contents and rename
zip -r $name.pbw *

cowsay -b Rock on! 2>>/dev/null
echo
echo "Done. The new file is here:"
cd ..
#ls -alh $dirname/$name.pbw
ls $dirname/$name.pbw






